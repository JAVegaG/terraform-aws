name: Manage aws infrastructure using terrafom

run-name: ${{ github.actor }} is updating the aws infrastructure üöÄ

on:
  pull_request:
    branches:
      - develop
      - main
  push:
    branches:
      - develop
#  workflow_dispatch:

env:
  WORKSPACE: github.ref_name

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Install aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const output = `### Terraform workspace \'${{ WORKSPACE }} \'
            #### Terraform Format and Style üñå \'${{ steps.fmt.outcome }}\'
            #### Terraform Initialization ‚öôÔ∏è \'${{ steps.init.outcome }}\'
            #### Terraform Validation ü§ñ \'${{ steps.validate.outcome }}\'
            <details><summary>Validation Output</summary>

            \'\'\'\n
            ${{ steps.validate.outputs.stdout }}
            \'\'\'

            </details>

            #### Terraform Plan üìñ \'${{ steps.plan.outcome }}\'

            <details><summary>Show Plan</summary>

            \'\'\'\n
            ${{ PLAN }}
            \'\'\'

            </details>

            *Pusher: @${{ github.actor }}, Action: \'${{ github.event_name }}\', Workflow: \'${{ github.workflow }}\'*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            echo output >> $GITHUB_STEP_SUMMARY
      
      - name: Terraform Apply
        id: apply
        if: ${{ ( steps.plan.outcome == 'success' ) && ( github.event_name != 'pull_request' ) }}
        run: terraform apply -auto-approve -var "workspace=$WORKSPACE"

      - name: Terraform Output
        if: ${{ success() && steps.apply.conclusion == 'success' }}
        run: echo "$(terraform output -no-color)" >> $GITHUB_STEP_SUMMARY